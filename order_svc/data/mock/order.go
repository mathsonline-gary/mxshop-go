// Code generated by MockGen. DO NOT EDIT.
// Source: order.go
//
// Generated by this command:
//
//	mockgen -source=order.go -destination=./mock/order.go
//

// Package mock_data is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/zycgary/mxshop-go/order_svc/model"
	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepo is a mock of OrderRepo interface.
type MockOrderRepo struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepoMockRecorder
}

// MockOrderRepoMockRecorder is the mock recorder for MockOrderRepo.
type MockOrderRepoMockRecorder struct {
	mock *MockOrderRepo
}

// NewMockOrderRepo creates a new mock instance.
func NewMockOrderRepo(ctrl *gomock.Controller) *MockOrderRepo {
	mock := &MockOrderRepo{ctrl: ctrl}
	mock.recorder = &MockOrderRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepo) EXPECT() *MockOrderRepoMockRecorder {
	return m.recorder
}

// CountOrders mocks base method.
func (m *MockOrderRepo) CountOrders(arg0 context.Context, arg1 int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountOrders", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountOrders indicates an expected call of CountOrders.
func (mr *MockOrderRepoMockRecorder) CountOrders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountOrders", reflect.TypeOf((*MockOrderRepo)(nil).CountOrders), arg0, arg1)
}

// DeleteCartItem mocks base method.
func (m *MockOrderRepo) DeleteCartItem(arg0 context.Context, arg1 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCartItem indicates an expected call of DeleteCartItem.
func (mr *MockOrderRepoMockRecorder) DeleteCartItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCartItem", reflect.TypeOf((*MockOrderRepo)(nil).DeleteCartItem), arg0, arg1)
}

// GetCartItemByID mocks base method.
func (m *MockOrderRepo) GetCartItemByID(arg0 context.Context, arg1 int32) (*model.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemByID", arg0, arg1)
	ret0, _ := ret[0].(*model.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemByID indicates an expected call of GetCartItemByID.
func (mr *MockOrderRepoMockRecorder) GetCartItemByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemByID", reflect.TypeOf((*MockOrderRepo)(nil).GetCartItemByID), arg0, arg1)
}

// GetCartItemByProductID mocks base method.
func (m *MockOrderRepo) GetCartItemByProductID(arg0 context.Context, arg1, arg2 int32) (*model.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCartItemByProductID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCartItemByProductID indicates an expected call of GetCartItemByProductID.
func (mr *MockOrderRepoMockRecorder) GetCartItemByProductID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCartItemByProductID", reflect.TypeOf((*MockOrderRepo)(nil).GetCartItemByProductID), arg0, arg1, arg2)
}

// GetOrderByID mocks base method.
func (m *MockOrderRepo) GetOrderByID(arg0 context.Context, arg1 int32) (*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrderRepoMockRecorder) GetOrderByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrderRepo)(nil).GetOrderByID), arg0, arg1)
}

// ListCartItems mocks base method.
func (m *MockOrderRepo) ListCartItems(arg0 context.Context, arg1 int32) ([]*model.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCartItems", arg0, arg1)
	ret0, _ := ret[0].([]*model.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCartItems indicates an expected call of ListCartItems.
func (mr *MockOrderRepoMockRecorder) ListCartItems(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCartItems", reflect.TypeOf((*MockOrderRepo)(nil).ListCartItems), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockOrderRepo) ListOrders(arg0 context.Context, arg1, arg2, arg3 int32) ([]*model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockOrderRepoMockRecorder) ListOrders(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockOrderRepo)(nil).ListOrders), arg0, arg1, arg2, arg3)
}

// UpsertCartItem mocks base method.
func (m *MockOrderRepo) UpsertCartItem(arg0 context.Context, arg1 *model.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCartItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCartItem indicates an expected call of UpsertCartItem.
func (mr *MockOrderRepoMockRecorder) UpsertCartItem(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCartItem", reflect.TypeOf((*MockOrderRepo)(nil).UpsertCartItem), arg0, arg1)
}
